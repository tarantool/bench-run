FROM ubuntu:18.04

RUN echo "deb http://archive.ubuntu.com/ubuntu bionic main multiverse restricted universe" >>/etc/apt/sources.list && \
    echo "deb http://archive.ubuntu.com/ubuntu bionic-security main multiverse restricted universe" >>/etc/apt/sources.list && \
    echo "deb http://archive.ubuntu.com/ubuntu bionic-updates main multiverse restricted universe" >>/etc/apt/sources.list && \
    echo "deb http://archive.ubuntu.com/ubuntu bionic-proposed main multiverse restricted universe" >>/etc/apt/sources.list && \
    echo "deb http://archive.ubuntu.com/ubuntu bionic-backports main multiverse restricted universe" >>/etc/apt/sources.list

RUN apt-get -y update && apt-get install -y -f \
    numactl gcc libc6-dev zlib1g-dev make libmysqlclient-dev \
    ssh vim git dh-autoreconf pkg-config libicu-dev \
    build-essential cmake coreutils sed libreadline-dev \
    libncurses5-dev libyaml-dev libssl-dev libcurl4-openssl-dev \
    libunwind-dev python python-pip python-setuptools python-dev \
    python-msgpack python-yaml python-argparse python-six python-gevent \
    gdb net-tools psmisc libevent-dev libmsgpuck-dev bc

# tarantool-c
RUN git clone --recursive https://github.com/tarantool/tarantool-c.git \
    /opt/tarantool-c
WORKDIR /opt/tarantool-c/third_party/msgpuck/
RUN ( cmake . >build.log 2>&1 && make -j >>build.log 2>&1 && \
    make install >>build.log 2>&1 ) || ( cat build.log && false )
WORKDIR /opt/tarantool-c
RUN ( cmake . >build.log 2>&1 && make -j >>build.log 2>&1 && \
    make install >>build.log 2>&1 ) || ( cat build.log && false )

# msgpack-c
RUN git clone https://github.com/msgpack/msgpack-c.git /opt/msgpack-c
WORKDIR /opt/msgpack-c
RUN ( cmake . >build.log 2>&1 && make -j >>build.log 2>&1 && \
    make install >>build.log 2>&1 ) || ( cat build.log && false )

# sysbench
RUN git clone https://github.com/tarantool/sysbench.git /opt/sysbench
WORKDIR /opt/sysbench
RUN ( ./autogen.sh >build.log 2>&1 && \
    ./configure --with-tarantool --without-mysql >>build.log 2>&1 && \
    make -j >>build.log 2>&1 && make install >>build.log 2>&1 ) || \
    ( cat build.log && false ) && ls -al /opt/sysbench/src/drivers/tarantool

# tpcc-tarantool
RUN git clone https://github.com/tarantool/tpcc.git /opt/tpcc
WORKDIR /opt/tpcc/src
RUN make -j >build.log 2>&1 || ( cat build.log && false )

# YCSB
RUN git clone https://github.com/tarantool/YCSB.git /opt/ycsb
RUN apt-get update -y && apt-get install -y gtk-update-icon-cache
RUN apt-get install --fix-missing -y -f default-jdk maven
WORKDIR /opt/ycsb
RUN mvn clean package >build.log 2>&1 || ( tail -n 1000 build.log && false )

# nosqlbench
RUN git clone --recursive https://github.com/tarantool/nosqlbench.git \
    /opt/nosqlbench
WORKDIR /opt/nosqlbench
RUN git submodule foreach --recursive
RUN git pull origin master
RUN apt-get install -y -f libev-dev
RUN ( cmake . >build.log 2>&1 && make -j >>build.log 2>&1 ) || \
    ( cat build.log && false )

# linkbench
RUN git clone https://github.com/tarantool/linkbench.git -b update-fixes \
    /opt/linkbench
RUN apt-get install --fix-missing -y -f default-jdk maven luarocks \
    google-perftools libgoogle-perftools-dev
WORKDIR /opt/linkbench
RUN luarocks install \
    https://raw.githubusercontent.com/tarantool/gperftools/master/rockspecs/gperftools-scm-1.rockspec \
    --local >build.log 2>&1 || ( cat build.log && false )

# TPC-H
RUN git clone https://github.com/tarantool/tpch.git /opt/tpch
RUN apt-get install -y -f sqlite3
WORKDIR /opt/linkbench

# adding python dependency
RUN pip install requests

